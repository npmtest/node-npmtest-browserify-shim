{"/home/travis/build/npmtest/node-npmtest-browserify-shim/test.js":"/* istanbul instrument in package npmtest_browserify_shim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/lib.npmtest_browserify_shim.js":"/* istanbul instrument in package npmtest_browserify_shim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify_shim = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify_shim = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify-shim && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify_shim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify_shim\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify_shim.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browserify_shim.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify_shim.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browserify_shim.__dirname + '/lib.npmtest_browserify_shim.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/node_modules/browserify-shim/index.js":"'use strict';\n\nvar util         =  require('util')\n  , resolve      =  require('resolve')\n  , exposify     =  require('exposify')\n  , format       =  require('util').format\n  , path         =  require('path')\n  , through      =  require('through')\n  , resolveShims =  require('./lib/resolve-shims')\n  , rename       =  require('rename-function-calls')\n  , debug        =  require('./lib/debug')\n\nvar shimRequire = '__browserify_shim_require__';\n\nfunction requireDependencies(depends, packageRoot, browserAliases, dependencies) {\n  if (!depends) return '';\n\n  function customResolve (k) { \n    // resolve aliases to full paths to avoid conflicts when require is injected into a file\n    // inside another package, i.e. the it's shim was defined in a package.json one level higher\n    // aliases don't get resolved by browserify in that case, since it only looks in the package.json next to it\n    var browserAlias = browserAliases && browserAliases[k]\n      , dependency = dependencies && dependencies[k]\n      , alias;\n    \n    try {\n      // prefer browser aliases defined explicitly\n      alias =  browserAlias \n        ? path.resolve(packageRoot, browserAlias) \n\n        // but also consider dependencies installed in the package in which shims were defined\n        : dependency \n          ? resolve.sync(k, { basedir: packageRoot }) \n\n          // lets hope for the best that browserify will be able to resolve this, cause we can't\n          : k;\n    } catch (err) {\n      // resolve.sync may fail, in which case we give up and hope browserify can figure it out\n      alias = k;\n    }\n\n    return { alias: alias, exports: depends[k] || null }; \n  }\n\n  function noResolve(k) { \n    return { alias: k, exports: depends[k] || null };\n  }\n\n  return Object.keys(depends)\n\n    // if the package was looked up from the parent of its enclosing package we need to pre-resolve the depends\n    .map(customResolve)\n    .reduce(\n      function (acc, dep) {\n        var alias = dep.alias.replace(/\\\\/g, \"\\\\\\\\\");\n        return dep.exports \n          // Example: jQuery = global.jQuery = require(\"jquery\");\n          // the global dangling variable is needed cause some libs reference it as such and it breaks outside of the browser,\n          // i.e.: (function ($) { ... })( jQuery )\n          // This little extra makes it work everywhere and since it's on top, it will be shadowed by any other definitions \n          // so it doesn't conflict with anything.\n          ? acc + dep.exports + ' = global.' + dep.exports + ' = require(\"' + alias + '\");\\n'\n          : acc + 'require(\"' + alias + '\");\\n';\n      }\n    , '\\n; '\n  );\n}\n\nfunction bindWindowWithExports(s, dependencies) {\n  // purposely make module, exports, require and define be 'undefined',\n  // but pass a function that allows exporting our dependency from the window or the context\n  \n  // This results in code similarly to this example which shims ember which depends on jquery:\n\n  /**\n   * -- browserify wrapper\n   * function(require,module,exports){ \n   *\n   *    -- our deps (which still have access to require)\n   *    jquery = global.jquery = require(\"/full/path/to/jquery.js\");\n   *\n   *    -- assigning shimmed require to actual require\n   *    -- this shouldn't matter, but would fix cases where libraries reach __browserify_shim_require__(x) as long \n   *    -- as x was included in the bundle\n   *\n   *    __browserify_shim_require__=require;\n   *\n   *    -- also it won't hurt anything\n   *\n   *    -- browserify-shim wrapper\n   *    (function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) { \n   *       -- inside this function neither module, exports, require, or define are defined\n   *\n   *       -- browserify_shim__define__module__export__ allows exporting (since module and exports aren't available)\n   *       \n   *       [..] -- code that needs shimming\n   *\n   *       -- exporting whatever ember attached to the window\n   *       ; browserify_shim__define__module__export__(typeof ember != \"undefined\" ? ember : window.ember); \n   *\n   *    }).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });\n   *    -- browserify-shim wrapper closed\n   *  }\n   *  -- browserify wrapper closed\n   */\n\n  // Shadowing require is necessary to fix code that tries to do common-js, but ends up requiring deps that cannot be resolved\n  // In the case below we want the below condition to be false at run time.\n  /**\n   * if (!jQuery && typeof require === 'function') {\n   *   jQuery = require('jquery');\n   * }\n   */\n\n   // Additionally `require('jquery')` needs to be refactored to prevent browserify from looking for 'jquery' at bundle time.\n   // The rewriting step happens inside the main @see shim function.\n   // Thus it gets rewritten via rename-function-calls:\n  /**\n   * if (!jQuery && typeof require === 'function') {\n   *   jQuery = __browserify_shim_removed_require__('jquery');\n   * }\n   */\n  // The fact that __browserify_shim_removed_require__ is not defined doesn't matter since we never enter that block.\n\n  return dependencies\n      + '; var ' + shimRequire + '=require;' \n      + '(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {\\n'\n      + s \n      + '\\n}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });\\n';\n}\n\nfunction bindWindowWithoutExports(s, dependencies) {\n  // if a module doesn't need anything to be exported, it is likely, that it exports itself properly\n  // therefore it is not a good idea to override the module here, however we need to still disable require\n  // all else is similar to @see bindWindowWithExports\n  return dependencies\n      + '; var ' + shimRequire + '=require;' \n      + '(function browserifyShim(module, define, require) {\\n'\n      + s \n      + '\\n}).call(global, module, undefined, undefined);\\n';\n}\n\nfunction moduleExport(exp) {\n  return format('\\n; browserify_shim__define__module__export__(typeof %s != \"undefined\" ? %s : window.%s);\\n', exp, exp, exp);\n}\n\nfunction wrap(content, config, packageRoot, browserAliases) {\n  var exported = config.exports\n      ? content + moduleExport(config.exports)\n      : content\n  , dependencies = requireDependencies(config.depends, packageRoot, browserAliases)\n  , boundWindow = config.exports\n      ? bindWindowWithExports(exported, dependencies)\n      : bindWindowWithoutExports(exported, dependencies);\n\n  return boundWindow;\n}\n\nmodule.exports = function shim(file) {\n  var content = '';\n  var stream = through(write, end);\n  return stream;\n\n  function write(buf) { content += buf; }\n  function end() {\n    var messages = [];\n    resolveShims(file, messages, function (err, info) {\n      if (err) {\n        stream.emit('error', err);\n        return stream.queue(null);\n      }\n\n      debug('');\n      debug.inspect({ file: file, info: info, messages: messages });\n\n      var eg = info.exposeGlobals;\n      if(eg && Object.keys(eg)) {\n        content = exposify.expose(eg, content);\n      }\n\n      if (info.shim) { \n        \n        // at this point we consider all remaining (not exposified) require statements to be invalid (why else are we shimming this)\n        content = rename('require', shimRequire, content);\n\n        var transformed = wrap(content, info.shim, info.packageDir, info.browser)\n        stream.queue(transformed);\n      } else { \n        stream.queue(content);\n      }\n\n      stream.queue(null);\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/node_modules/browserify-shim/lib/resolve-shims.js":"'use strict';\n\nvar path             = require('path')\n  , fs               = require('fs')\n  , util             = require('util')\n  , parseInlineShims = require('./parse-inline-shims')\n  , mothership       = require('mothership')\n  , format           = require('util').format\n\nvar shimsCache =  {}\n  , shimsByPath     =  {};\n\nfunction inspect(obj, depth) {\n  return util.inspect(obj, false, depth || 5, true);\n}\n\nfunction isPath(s) {\n  return (/^[.]{0,2}[/\\\\]/).test(s);\n}\n\nfunction validate(key, config, dir) {\n  var msg\n    , details = 'When evaluating shim \"' + key + '\": ' + inspect(config) + '\\ninside ' + dir + '\\n';\n\n  if (!config.hasOwnProperty('exports')) {\n    msg = 'browserify-shim needs at least a path and exports to do its job, you are missing the exports. ' +\n          '\\nIf this module has no exports, specify exports as null.'\n    throw new Error(details + msg);\n  }\n}\n\nfunction updateCache(packageDir, pack, resolvedShims, exposeGlobals) {\n  shimsCache[packageDir] = { pack: pack, shims: resolvedShims, exposeGlobals: exposeGlobals };\n  Object.keys(resolvedShims).forEach(function(fullPath) {\n    var shim = resolvedShims[fullPath]; \n    validate(fullPath, shim, packageDir);\n    shimsByPath[fullPath] = shim;\n  });\n}\n\nfunction resolveDependsRelativeTo(dir, browser, depends, packDeps, messages) {\n  var resolved;\n\n  if (!depends) return undefined;\n\n  return Object.keys(depends).reduce(function (acc, k) {\n    if (browser[k]){\n      acc[k] = depends[k];\n      messages.push(format('Found depends \"%s\" exposed in browser field', k));\n    } else if (!isPath(k)) {\n      acc[k] = depends[k];\n      if (packDeps[k]) {\n        messages.push(format('Found depends \"%s\" as an installed dependency of the package', k));\n      } else {\n        messages.push(format('WARNING, depends \"%s\" is not a path, nor is it exposed in the browser field, nor was it found in package dependencies.', k));\n      }\n    } else {\n      // otherwise resolve the path\n      resolved = path.resolve(dir, k);\n      acc[resolved] = depends[k];\n      messages.push(format('Depends \"%s\" was resolved to be at [%s]', k, resolved));\n    }\n\n    return acc;\n  }, {})\n}\n\nfunction resolvePaths (packageDir, shimFileDir, browser, shims, packDeps, messages) {\n  return Object.keys(shims)\n    .reduce(function (acc, relPath) {\n      var shim = shims[relPath];\n      var exposed = browser[relPath];\n      var shimPath;\n\n      if (exposed) {\n        // lib exposed under different name/path in package.json's browser field\n        // and it is referred to by this alias in the shims (either external or in package.json)\n        // i.e.: 'non-cjs': { ... } -> browser: { 'non-cjs': './vendor/non-cjs.js }\n        shimPath = path.resolve(packageDir, exposed);\n        messages.push(format('Found \"%s\" in browser field referencing \"%s\" and resolved it to \"%s\"', relPath, exposed, shimPath));\n      } else if (shimFileDir) {\n        // specified via relative path to shim file inside shim file\n        // i.e. './vendor/non-cjs': { exports: .. } \n        shimPath = path.resolve(shimFileDir, relPath);\n        messages.push(format('Resolved \"%s\" found in shim file to \"%s\"', relPath, shimPath));\n      } else {\n        // specified via relative path in package.json browserify-shim config\n        // i.e. 'browserify-shim': { './vendor/non-cjs': 'noncjs' }\n        shimPath = path.resolve(packageDir, relPath);\n        messages.push(format('Resolved \"%s\" found in package.json to \"%s\"', relPath, shimPath));\n      }\n      var depends = resolveDependsRelativeTo(shimFileDir || packageDir, browser, shim.depends, packDeps, messages);\n\n      acc[shimPath] = { exports: shim.exports, depends: depends };\n      return acc;\n    }, {});\n}\n\nfunction mapifyExposeGlobals(exposeGlobals) {\n  return Object.keys(exposeGlobals)\n    .reduce(function (acc, k) {\n\n      var val = exposeGlobals[k];\n      var parts = val.split(':');\n\n      if (parts.length < 2 || !parts[1].length) { \n        throw new Error(\n            'Expose Globals need to have the format \"global:expression.\\n\"'\n          + inspect({ key: k, value: val }) + 'does not.'\n        );\n      }\n\n      // this also handle unlikely cases of 'global:_.someFunc(':')' with a `:` in the actual global expression\n      parts.shift();\n      acc[k] = parts.join(':');\n\n      return acc;\n    }, {});\n}\n\nfunction separateExposeGlobals(shims) {\n  var onlyShims = {}\n    , exposeGlobals = {};\n\n  Object.keys(shims).forEach(function (k) {\n    var val = shims[k]\n      , exp = val && val.exports;\n\n    if (exp && /^global\\:/.test(exp)) {\n      exposeGlobals[k] = exp;\n    } else {\n      onlyShims[k] = val;\n    }\n  });\n\n  return { shims: onlyShims, exposeGlobals: mapifyExposeGlobals(exposeGlobals) };\n}\n\nfunction resolveFromShimFile(packageDir, pack, shimField, messages) {\n  var shimFile =  path.join(packageDir, shimField)\n    , shimFileDir = path.dirname(shimFile);\n\n  var allShims = require(shimFile);\n  var separated = separateExposeGlobals(allShims);\n\n  var resolvedShims = resolvePaths(packageDir, shimFileDir, pack.browser || {}, separated.shims, pack.dependencies || {}, messages);\n  return { shims: resolvedShims, exposeGlobals: separated.exposeGlobals };\n}\n\nfunction resolveInlineShims(packageDir, pack, shimField, messages) {\n  var allShims = parseInlineShims(shimField);\n  var separated = separateExposeGlobals(allShims);\n\n  var resolvedShims = resolvePaths(packageDir, null, pack.browser || {}, separated.shims, pack.dependencies || {}, messages);\n  return { shims: resolvedShims, exposeGlobals: separated.exposeGlobals };\n}\n\nvar resolve = module.exports = function resolveShims (file, messages, cb) {\n  // find the package.json that defines browserify-shim config for this file\n  mothership(file, function (pack) { return !! pack['browserify-shim'] }, function (err, res) {\n    if (err) return cb(err);\n\n    if (!res || !res.pack) return cb(new Error('Unable to find a browserify-shim config section in the package.json for ' + file));\n\n    var pack       = res.pack;\n    var packFile   = res.path;\n    var packageDir = path.dirname(packFile);\n\n    // we cached this before which means it was also grouped by file\n    var cached = shimsCache[packageDir];\n    // if it was cached, that means any package fixes were applied as well\n    if (cached) { \n      return cb(null, { \n          package_json       :  packFile\n        , packageDir         :  packageDir\n        , resolvedPreviously :  true\n        , shim               :  shimsByPath[file]\n        , exposeGlobals      :  cached.exposeGlobals\n        , browser            :  pack.browser\n        , 'browserify-shim'  :  pack['browserify-shim']\n        , dependencies       :  pack.dependencies\n      });\n    }\n\n      try {\n        pack = require(packFile);\n\n        var shimField = pack['browserify-shim'];\n        if (!shimField) return cb(null, { package_json: packFile, shim: undefined }); \n\n        var resolved = typeof shimField === 'string'\n          ? resolveFromShimFile(packageDir, pack, shimField, messages)\n          : resolveInlineShims(packageDir, pack, shimField, messages);\n\n        messages.push({ resolved: resolved.shims });\n        updateCache(packageDir, pack, resolved.shims, resolved.exposeGlobals);\n\n        cb(null, { \n            package_json      :  packFile\n          , packageDir        :  packageDir \n          , shim              :  shimsByPath[file]\n          , exposeGlobals     :  resolved.exposeGlobals\n          , browser           :  pack.browser\n          , 'browserify-shim' :  pack['browserify-shim']\n          , dependencies      :  pack.dependencies\n        });\n\n      } catch (err) {\n        console.trace();\n        return cb(err);\n      }\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/node_modules/browserify-shim/lib/parse-inline-shims.js":"'use strict';\n\nfunction parseDepends(deps) {\n  if (!deps) return undefined;\n  // allow depends: [ '..' ] and depends: '..'\n  deps = Array.isArray(deps) ? deps : [ deps ];\n\n  return deps\n    .reduce(function (acc, d) {\n      var parts = d.split(':');\n      if (!parts \n          || parts.length > 2 \n          || parts.length < 1\n          || !parts[0]) \n        throw new Error('Invalid depends specification: \"' + d + '\". Needs to have format: \"nameORpath:export\"');\n\n      parts = parts.map(function (p) { \n        return typeof p === 'string' ? p.trim() : p \n      });\n        \n      // if parts[1] is not defined that means that we depend on module named in parts[0]\n      // but we don't need it to be attached to the window under a certain name\n      acc[parts[0]] = parts[1] || null;\n      return acc;\n    }, {});\n}\n\n/**\n * Parses inlined shims-config and returns a config in the same format that is used by external shims\n *\n * Example:\n *\n *  Given:  \n *    { jquery: '$',\n *      'non-cjs': 'noncjs',\n *      'non-cjs-dep': { exports: 'noncjsdep', depends: 'non-cjs:noncjs' },\n *      'just-dep': { exports: 'justdep', depends: [ 'non-cjs:noncjs', 'jquery:$' ] } \n *    }\n *\n *  returns: \n *    { jquery: { exports: '$', depends: undefined },\n *      'non-cjs': { exports: 'noncjs', depends: undefined },\n *      'non-cjs-dep': { exports: 'noncjsdep', depends: { 'non-cjs': 'noncjs' } },\n *      'just-dep': { exports: 'justdep', depends: { 'non-cjs': 'noncjs', jquery: '$' } } \n *    }\n * \n * @name parseInlineShims \n * @function\n * @param {Object} config inlined shims config\n * @return {Object} parsed config\n */\nvar go = module.exports = function (config) {\n  // all errors thrown are caught inside resolve-shims and passed back to browserify-shim\n  return Object.keys(config)\n    .reduce(function (acc, field) {\n      var conf = config[field];\n      \n      // normalize two possible formats:\n      //    \"key\": \"export,\n      //    \"key\": { \"exports\": \"export\" .. }\n      if (typeof conf === 'string') conf = { exports: conf };\n\n      var exps = conf.exports && conf.exports.length ? conf.exports.trim() : null;\n\n      acc[field.trim()] = {\n          exports: exps \n        , depends: parseDepends(conf.depends)\n      }\n\n      return acc;\n    }, {});\n}\n","/home/travis/build/npmtest/node-npmtest-browserify-shim/node_modules/browserify-shim/lib/debug.js":"'use strict';\n\nvar diagnostics = process.env.BROWSERIFYSHIM_DIAGNOSTICS;\n\nfunction inspect(obj, depth) {\n  return require('util').inspect(obj, false, depth || 5, true);\n}\n\nexports = module.exports = function debug() {\n  if (diagnostics) console.error.apply(console, arguments);\n}\n\nexports.inspect = function(obj, depth) {\n  if (diagnostics) console.error(inspect(obj, depth));\n}\n"}